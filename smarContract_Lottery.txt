// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract lotteyApp{
address public manager;
address payable[] public  participants;


constructor()
{
    manager = msg.sender;
}

modifier onlyManager(){
    require(msg.sender==manager);
    _;
}

receive()external  payable {
    require(msg.value==1 ether);
    participants.push(payable (msg.sender));
}

function chekBalance()public view onlyManager returns(uint){
   return  address(this).balance;
} 

function random()public view  returns (uint){
    return uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,participants)));
}


function winner()public  onlyManager{
    require(participants.length>=3);
    uint r = random();
    address payable winnerName;
    uint index = r%participants.length;
    winnerName =  participants[index];
    winnerName.transfer(chekBalance());
    participants = new address payable [](0);

}

   
}



