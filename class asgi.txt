// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;



contract Test{

    address payable  public  getter = payable (0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2);

    struct Funder {
        address funderAdr;
        uint256 balance;
        uint256 withdrawn;
    }

    mapping(address => Funder) public Funders;
    

    receive()external payable {}
    fallback()external payable {}


    function checkBalance()public view returns(uint){
       return address(this).balance;
    }  


    // function Call(address payable _addr)public {
        

    //     (bool sent,) = getter.call{value:1000000000000000000}("");
    //     require(sent,"Transuction failed"); 
    // }






}





//    contract share {


//        address payable public   admin;
//        uint withdrawNum;
//        constructor(){
//            admin = payable(msg.sender);
//        } 
                  
//             mapping (address=>bool) public  depositStatus;
//             mapping (address =>uint )public depositValue;



//             function deposit()public payable{
//                   admin.transfer(msg.value);
//                   depositStatus[msg.sender] = true;
//             }

//              function withdraw()public {

//              }
//    }





contract Bank {
    address[] public accounts;
    mapping(address => uint) etherRecieved;
    uint withdrawalCount;

    function deposit() public payable returns(bool) {
        require(msg.value >0, "Deposits shouldbe greater than zero");
        accounts.push(address(msg.sender));
        etherRecieved[msg.sender] = etherRecieved[msg.sender] + msg.value;
        return true;
    }


    modifier accountExists () {
        
        for (uint i=0; i<accounts.length; i++){
            if (accounts[i] == address(msg.sender)){  
                _;
                break;
            }
        }
    }

    function withdraw () public payable accountExists returns (uint withdrawalAmount){
        require(etherRecieved[msg.sender] > 0, "Balance is zero");
        if (withdrawalCount == 0) {
            withdrawalAmount = (etherRecieved[msg.sender] * 9) / 10;
        }else if (withdrawalCount == 1){
            withdrawalAmount = (etherRecieved[msg.sender] * 8) / 20;
        }else if (withdrawalCount == 2){
            withdrawalAmount = (etherRecieved[msg.sender] * 7) / 30;
        }else{
            withdrawalAmount =etherRecieved[msg.sender];
        }

        for(uint i = 0; i < accounts.length; i++){
            if(accounts[i] == msg.sender){
                accounts[i] = address(0);
            }
        }

        etherRecieved[msg.sender] = 0;
        payable(msg.sender).transfer(withdrawalAmount);        
        withdrawalCount += 1;

    } 

}






















contract Deposit {
    mapping (address => uint256) depositors;
    uint counter;

    constructor() {
        counter = 0;
    }
    function deposit() public payable {
        require(msg.value >= 1 ether,"The minimum amount entered should be 1 ether");
        depositors[msg.sender] += msg.value;
    }

    function recieve() external  payable {
        deposit();
    }

    function withdrawal() public {
        require(depositors[msg.sender] > 0,"You have not deposited any ether");
        if(counter == 0) {
            payable(msg.sender).transfer((depositors[msg.sender] / 100) * 90);
        }
        else if(counter == 1) {
            payable(msg.sender).transfer((depositors[msg.sender] / 100) * 80);
        }
        else if(counter == 2) {
            payable(msg.sender).transfer((depositors[msg.sender] / 100) * 70);
        }
        depositors[msg.sender] = 0;
        counter += 1;
    }
}




// contract Deposit {
//     mapping (address => uint256) depositors;
//     uint counter;

//     constructor() {
//         counter = 0;
//     }
//     function deposit() public payable {
//         require(msg.value >= 1 ether,"The minimum amount entered should be 1 ether");
//         depositors[msg.sender] += msg.value;
//     }

//     function recieve() external  payable {
//         deposit();
//     }

//         // mapping (address=>block.timestamp)  time;
//     function withdrawal() public {
//         require(depositors[msg.sender] > 0,"You have not deposited any ether");
//         if(counter == 0) {
//             payable(msg.sender).transfer((depositors[msg.sender] *90) /100);
//         }
//         else if(counter == 1) {
//             payable(msg.sender).transfer((depositors[msg.sender] *80) / 100);
//         }
//         else if(counter == 2) {
//             payable(msg.sender).transfer((depositors[msg.sender]*70) / 100);
//         }
//         depositors[msg.sender] = 0;
//         counter += 1;
//     }
// }